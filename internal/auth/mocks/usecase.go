// Code generated by MockGen. DO NOT EDIT.
// Source: internal/auth/usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	auth "github.com/SlavaShagalov/my-trello-backend/internal/auth"
	models "github.com/SlavaShagalov/my-trello-backend/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CheckAuth mocks base method.
func (m *MockUsecase) CheckAuth(userID int, authToken string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuth", userID, authToken)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuth indicates an expected call of CheckAuth.
func (mr *MockUsecaseMockRecorder) CheckAuth(userID, authToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuth", reflect.TypeOf((*MockUsecase)(nil).CheckAuth), userID, authToken)
}

// Logout mocks base method.
func (m *MockUsecase) Logout(userID int, authToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", userID, authToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockUsecaseMockRecorder) Logout(userID, authToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockUsecase)(nil).Logout), userID, authToken)
}

// SignIn mocks base method.
func (m *MockUsecase) SignIn(params *auth.SignInParams) (models.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", params)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUsecaseMockRecorder) SignIn(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUsecase)(nil).SignIn), params)
}

// SignUp mocks base method.
func (m *MockUsecase) SignUp(params *auth.SignUpParams) (models.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", params)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUsecaseMockRecorder) SignUp(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUsecase)(nil).SignUp), params)
}
